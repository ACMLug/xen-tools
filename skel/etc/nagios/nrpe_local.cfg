######################################
# Do any local nrpe configuration here
######################################


# LOG FACILITY
# The syslog facility that should be used for logging purposes.

log_facility=daemon



# PID FILE
# The name of the file in which the NRPE daemon should write it's process ID
# number.  The file is only written if the NRPE daemon is started by the root
# user and is running in standalone mode.

pid_file=/var/run/nrpe.pid



# PORT NUMBER
# Port number we should wait for connections on.
# NOTE: This must be a non-priviledged port (i.e. > 1024).
# NOTE: This option is ignored if NRPE is running under either inetd or xinetd

server_port=5666



# SERVER ADDRESS
# Address that nrpe should bind to in case there are more than one interface
# and you do not want nrpe to bind on all interfaces.
# NOTE: This option is ignored if NRPE is running under either inetd or xinetd


server_address=<%= @nrpe_bind_addr  %>

# NRPE USER
# This determines the effective user that the NRPE daemon should run as.
# You can either supply a username or a UID.
#
# NOTE: This option is ignored if NRPE is running under either inetd or xinetd

nrpe_user=nagios



# NRPE GROUP
# This determines the effective group that the NRPE daemon should run as.
# You can either supply a group name or a GID.
#
# NOTE: This option is ignored if NRPE is running under either inetd or xinetd

nrpe_group=nagios



# ALLOWED HOST ADDRESSES
# This is an optional comma-delimited list of IP address or hostnames
# that are allowed to talk to the NRPE daemon. Network addresses with a bit mask
# (i.e. 192.168.1.0/24) are also supported. Hostname wildcards are not currently
# supported.
#
# Note: The daemon only does rudimentary checking of the client's IP
# address.  I would highly recommend adding entries in your /etc/hosts.allow
# file to allow only the specified host to connect to the port
# you are running this daemon on.
#
# NOTE: This option is ignored if NRPE is running under either inetd or xinetd

allowed_hosts=192.17.239.16



# COMMAND ARGUMENT PROCESSING
# This option determines whether or not the NRPE daemon will allow clients
# to specify arguments to commands that are executed.  This option only works
# if the daemon was configured with the --enable-command-args configure script
# option.
#
# *** ENABLING THIS OPTION IS A SECURITY RISK! ***
# Read the SECURITY file for information on some of the security implications
# of enabling this variable.
#
# Values: 0=do not allow arguments, 1=allow command arguments

dont_blame_nrpe=0

# BASH COMMAND SUBTITUTION
# This option determines whether or not the NRPE daemon will allow clients
# to specify arguments that contain bash command substitutions of the form
# $(...).  This option only works if the daemon was configured with both
# the --enable-command-args and --enable-bash-command-substitution configure
# script options.
#
# *** ENABLING THIS OPTION IS A HIGH SECURITY RISK! ***
# Read the SECURITY file for information on some of the security implications
# of enabling this variable.
#
# Values: 0=do not allow bash command substitutions,
#         1=allow bash command substitutions

allow_bash_command_substitution=0



# COMMAND PREFIX
# This option allows you to prefix all commands with a user-defined string.
# A space is automatically added between the specified prefix string and the
# command line from the command definition.
#
# *** THIS EXAMPLE MAY POSE A POTENTIAL SECURITY RISK, SO USE WITH CAUTION! ***
# Usage scenario:
# Execute restricted commmands using sudo.  For this to work, you need to add
# the nagios user to your /etc/sudoers.  An example entry for alllowing
# execution of the plugins from might be:
#
# nagios          ALL=(ALL) NOPASSWD: /usr/lib/nagios/plugins/
#
# This lets the nagios user run all commands in that directory (and only them)
# without asking for a password.  If you do this, make sure you don't give
# random users write access to that directory or its contents!

#command_prefix=/usr/bin/sudo


# DEBUGGING OPTION
# This option determines whether or not debugging messages are logged to the
# syslog facility.
# Values: 0=debugging off, 1=debugging on

debug=0



# COMMAND TIMEOUT
# This specifies the maximum number of seconds that the NRPE daemon will
# allow plugins to finish executing before killing them off.

command_timeout=300



# CONNECTION TIMEOUT
# This specifies the maximum number of seconds that the NRPE daemon will
# wait for a connection to be established before exiting. This is sometimes
# seen where a network problem stops the SSL being established even though
# all network sessions are connected. This causes the nrpe daemons to
# accumulate, eating system resources. Do not set this too low.

connection_timeout=60



# WEEK RANDOM SEED OPTION
# This directive allows you to use SSL even if your system does not have
# a /dev/random or /dev/urandom (on purpose or because the necessary patches
# were not applied). The random number generator will be seeded from a file
# which is either a file pointed to by the environment valiable $RANDFILE
# or $HOME/.rnd. If neither exists, the pseudo random number generator will
# be initialized and a warning will be issued.
# Values: 0=only seed from /dev/[u]random, 1=also seed from weak randomness

#allow_weak_random_seed=1



# INCLUDE CONFIG FILE
# This directive allows you to include definitions from an external config file.

#include=<somefile.cfg>



# INCLUDE CONFIG DIRECTORY
# This directive allows you to include definitions from config files (with a
# .cfg extension) in one or more directories (with recursion).

#include_dir=<somedirectory>
#include_dir=<someotherdirectory>



# COMMAND DEFINITIONS
# Command definitions that this daemon will run.  Definitions
# are in the following format:
#
# command[<command_name>]=<command_line>
#
# When the daemon receives a request to return the results of <command_name>
# it will execute the command specified by the <command_line> argument.
#
# Unlike Nagios, the command line cannot contain macros - it must be
# typed exactly as it should be executed.
#
# Note: Any plugins that are used in the command lines must reside
# on the machine that this daemon is running on!  The examples below
# assume that you have plugins installed in a /usr/local/nagios/libexec
# directory.  Also note that you will have to modify the definitions below
# to match the argument format the plugins expect.  Remember, these are
# examples only!


# The following examples use hardcoded command arguments...

############
# Services #
############

command[check_rsyslog]=/usr/bin/sudo /usr/local/nagios/libexec/check_service.sh -o linux -s rsyslog -t "service rsyslog status"
command[check_ssh]=/usr/bin/sudo /usr/local/nagios/libexec/check_service.sh -o linux -s sshd -t "service sshd status"
command[check_ssh_blocking]=/usr/local/nagios/libexec/check_procs -C sshd -s D -c 0
command[check_puppet]=/usr/bin/sudo /usr/local/nagios/libexec/check_service.sh -o linux -s pe-puppet -t "service pe-puppet status"
command[check_iptables]=/usr/bin/sudo /usr/local/nagios/libexec/check_service.sh -o linux -s iptables -t "service iptables status"
command[check_auditd]=/usr/bin/sudo /usr/local/nagios/libexec/check_service.sh -o linux -s auditd -t "service auditd status"
command[check_vmtools]=/usr/bin/sudo /usr/local/nagios/libexec/check_service.sh -s vmware-tools-services -o linux

##########
# System #
##########

# Based on number of CPU's
command[check_load]=/usr/local/nagios/libexec/check_load -w 1,1.5,1.7 -c 3,2.5,2
command[check_memory]=/usr/local/nagios/libexec/check_memory.sh -w 80 -c 90
command[check_swap]=/usr/local/nagios/libexec/check_swap -w 50 -c 30
command[check_users]=/usr/local/nagios/libexec/check_users -w 5 -c 7

######################
# Disk and Partition #
######################

command[check_disk]=/usr/local/nagios/libexec/check_disk -w 10 -c 5 -p / -p /home -p /usr -p /usr/local -p /var -p /tmp -p /boot

######################
# Filesystem Checks  #
######################

command[io_error]=/bin/dmesg | /bin/grep -E 'I/O error|failure' && exit 1 || /bin/echo "No I/O errors found"
command[check_fs_write]=/usr/bin/sudo /usr/local/nagios/libexec/check_fs_write.sh -o /,/boot,/home,/tmp,/usr,/usr/local,/var

###########
# Network #
###########

command[check_for_100mb_link]=/bin/bash -c '/bin/cat /sys/class/net/eth[0-9]/speed 2>/dev/null | /bin/grep "^100$" 2>&1>/dev/null' && echo "100Mb link found" && exit 2 || echo "Not 100Mb"
command[check_pps]=/usr/local/nagios/libexec/check_pps.sh -i eth0 -p -w 30000 -c 50000
command[check_linerate]=/usr/local/nagios/libexec/check_pps.sh -i eth0 -r -w 50 -c 70

#######
# Bro #
#######

command[bro_status]=/usr/bin/sudo /usr/local/nagios/libexec/check_bro.sh -f /bro/bin/broctl -T status
command[bro_capture_loss]=/usr/local/nagios/libexec/check_bro.sh -f /bro/logs/current/capture_loss.log -T capture_loss -c 10
command[check_file_growth_bro_log]=/usr/local/nagios/libexec/check_file_growth.sh -f /bro/logs/current/conn.log -M stat -i 3
command[check_bro_cpu]=/usr/local/nagios/libexec/check_procs -m CPU -C bro -w 80 -c 90
command[check_bro_memory]=/usr/local/nagios/libexec/check_procs -m RSS -C bro -w 699050 -c 1256576

##########
# Syslog #
##########

command[check_rsyslog_rss]=/usr/local/nagios/libexec/check_procs -m RSS -C rsyslogd -c 100000
command[check_rsyslog_cpu]=/usr/local/nagios/libexec/check_procs -m CPU -C rsyslogd -w 10 -c 20
command[check_rsyslog_blocking]=/usr/local/nagios/libexec/check_procs -C rsyslogd -s D -c 0
command[check_rsyslog_procs]=/usr/local/nagios/libexec/check_procs -C rsyslogd -w 2 -c 3
command[check_rsyslog_buffer]=/usr/local/nagios/libexec/check_rsyslog.sh -T buffer -q rsyslog -d /var/spool/rsyslog
command[check_rsyslog_buffer_relay]=/usr/local/nagios/libexec/check_rsyslog.sh -T buffer -q rsyslog -d /rsyslog-buffer
command[check_rsyslog_buffer_analysis]=/usr/local/nagios/libexec/check_rsyslog.sh T buffer -q analysis -d /rsyslog-buffer
command[check_rsyslog_queued_relay_analysis]=/usr/local/nagios/libexec/check_rsyslog.sh -T queued -f /impstats/rsyslog-stats.log -q analysis
command[check_rsyslog_queued_relay_cyclone]=/usr/local/nagios/libexec/check_rsyslog.sh -T queued -f /impstats/rsyslog-stats.log -q cyclone
command[check_rsyslog_queued_relay_seclogs]=/usr/local/nagios/libexec/check_rsyslog.sh -T queued -f /impstats/rsyslog-stats.log -q seclogs
command[check_rsyslog_queued_relay_main]=/usr/local/nagios/libexec/check_rsyslog.sh -T queued -f /impstats/rsyslog-stats.log -q main

command[analysis-sec_log_growth]=/usr/local/nagios/libexec/check_file_growth.sh -f /logs-to-analyze/all.log -M stat -i 3

# Eventhandler to restart rsyslog when a buffer file is present
command[rsyslog_service_restart]=/usr/bin/sudo /usr/local/nagios/libexec/check_service.sh -o linux -s rsyslog -t "service rsyslog restart"

##########
# OSSEC #
#########

# Check that all OSSEC services are running e.g. execd, remoted, etc.
command[check_ossec_status]=/usr/bin/sudo /usr/local/nagios/libexec/check_ossec.sh -s all
# Thresholds are # of agents offline
command[check_ossec_agents]=/usr/bin/sudo /usr/local/nagios/libexec/check_ossec.sh -w 7 -c 10

# OSSEC per agent checks
command[check_ossec_agent_open-nsm]=/usr/bin/sudo /usr/local/nagios/libexec/check_ossec.sh -a open-nsm

##########
# NFCAPD #
##########

command[check_file_growth_nfcap]=/usr/local/nagios/libexec/check_file_growth.sh -i 100 -M stat -f /usr/local/nfsen/profiles-data/live/netdata/nfcapd.current.*

#######
# CIF #
#######
